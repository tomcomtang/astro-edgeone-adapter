---
// projects.astro - 项目案例列表页面
import Layout from "../layouts/BlogPost.astro";
---

<Layout
  title="项目案例 - 我的作品集"
  description="展示我的技术项目和开发案例，包括 Web 应用、移动应用和开源项目"
  pubDate={new Date()}
>
  <div class="wrapper">
    <h1>🚀 项目案例</h1>
    <p class="text-lg">
      这里展示了我参与开发的一些技术项目和案例，涵盖了前端、后端、全栈开发等多个领域。
    </p>

    <!-- 筛选和搜索区域 -->
    <div class="filters-section">
      <div class="filter-group">
        <label for="category-filter">分类筛选：</label>
        <select id="category-filter" class="filter-select">
          <option value="all">全部项目</option>
          <option value="Web Development">Web 开发</option>
          <option value="E-commerce">电商平台</option>
          <option value="Productivity">效率工具</option>
          <option value="Blog">博客系统</option>
          <option value="Data Visualization">数据可视化</option>
        </select>
      </div>
      
      <div class="filter-group">
        <label>
          <input type="checkbox" id="featured-filter" />
          只显示精选项目
        </label>
      </div>
      
      <div class="filter-group">
        <button id="refresh-btn" class="refresh-btn">🔄 刷新数据</button>
      </div>
    </div>

    <!-- 加载状态 -->
    <div id="loading" class="loading-state">
      <div class="spinner"></div>
      <p>正在加载项目数据...</p>
    </div>

    <!-- 项目列表 -->
    <div id="projects-container" class="projects-container" style="display: none;">
      <div id="projects-grid" class="projects-grid">
        <!-- 项目卡片将通过 JavaScript 动态生成 -->
      </div>
      
      <!-- 分页控制 -->
      <div id="pagination" class="pagination" style="display: none;">
        <button id="prev-page" class="page-btn" disabled>← 上一页</button>
        <span id="page-info" class="page-info">第 1 页，共 1 页</span>
        <button id="next-page" class="page-btn">下一页 →</button>
      </div>
    </div>

    <!-- 错误状态 -->
    <div id="error-state" class="error-state" style="display: none;">
      <h3>❌ 加载失败</h3>
      <p id="error-message">无法加载项目数据，请稍后重试。</p>
      <button id="retry-btn" class="retry-btn">重试</button>
    </div>

    <!-- 空状态 -->
    <div id="empty-state" class="empty-state" style="display: none;">
      <h3>📭 暂无项目</h3>
      <p>当前筛选条件下没有找到项目案例。</p>
    </div>
  </div>
</Layout>

<script>
  // 项目案例管理
  class ProjectManager {
    private currentPage: number;
    private pageSize: number;
    private currentCategory: string;
    private showFeaturedOnly: boolean;
    private projects: any[];
    private totalProjects: number;

    constructor() {
      this.currentPage = 1;
      this.pageSize = 6;
      this.currentCategory = 'all';
      this.showFeaturedOnly = false;
      this.projects = [];
      this.totalProjects = 0;
      
      this.init();
    }

    init() {
      this.bindEvents();
      this.loadProjects();
    }

    bindEvents() {
      // 分类筛选
      document.getElementById('category-filter')?.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        this.currentCategory = target.value;
        this.currentPage = 1;
        this.loadProjects();
      });

      // 精选筛选
      document.getElementById('featured-filter')?.addEventListener('change', (e) => {
        const target = e.target as HTMLInputElement;
        this.showFeaturedOnly = target.checked;
        this.currentPage = 1;
        this.loadProjects();
      });

      // 刷新按钮
      document.getElementById('refresh-btn')?.addEventListener('click', () => {
        this.loadProjects();
      });

      // 重试按钮
      document.getElementById('retry-btn')?.addEventListener('click', () => {
        this.loadProjects();
      });

      // 分页按钮
      document.getElementById('prev-page')?.addEventListener('click', () => {
        if (this.currentPage > 1) {
          this.currentPage--;
          this.loadProjects();
        }
      });

      document.getElementById('next-page')?.addEventListener('click', () => {
        const totalPages = Math.ceil(this.totalProjects / this.pageSize);
        if (this.currentPage < totalPages) {
          this.currentPage++;
          this.loadProjects();
        }
      });
    }

    async loadProjects() {
      this.showLoading();
      
      try {
        const params = new URLSearchParams({
          limit: this.pageSize.toString(),
          offset: ((this.currentPage - 1) * this.pageSize).toString()
        });

        if (this.currentCategory !== 'all') {
          params.append('category', this.currentCategory);
        }

        if (this.showFeaturedOnly) {
          params.append('featured', 'true');
        }

        const response = await fetch(`/api/projects?${params}`);
        const result = await response.json();

        if (result.success) {
          this.projects = result.data.projects;
          this.totalProjects = result.data.total;
          this.renderProjects();
          this.updatePagination();
          this.showProjects();
        } else {
          this.showError(result.error || '加载项目数据失败');
        }
      } catch (error) {
        console.error('Error loading projects:', error);
        this.showError('网络错误，请检查网络连接');
      }
    }

    renderProjects() {
      const container = document.getElementById('projects-grid');
      if (!container) return;

      if (this.projects.length === 0) {
        this.showEmpty();
        return;
      }

      container.innerHTML = this.projects.map((project: any) => `
        <div class="project-card ${project.featured ? 'featured' : ''}">
          <div class="project-image">
            <img src="${project.image}" alt="${project.title}" loading="lazy" />
            ${project.featured ? '<div class="featured-badge">⭐ 精选</div>' : ''}
          </div>
          
          <div class="project-content">
            <div class="project-header">
              <h3 class="project-title">${project.title}</h3>
              <span class="project-category">${project.category}</span>
            </div>
            
            <p class="project-description">${project.description}</p>
            
            <div class="project-technologies">
              ${project.technologies.map((tech: string) => `<span class="tech-tag">${tech}</span>`).join('')}
            </div>
            
            <div class="project-links">
              ${project.githubUrl ? `<a href="${project.githubUrl}" target="_blank" class="project-link github">📁 GitHub</a>` : ''}
              ${project.liveUrl ? `<a href="${project.liveUrl}" target="_blank" class="project-link live">🌐 在线预览</a>` : ''}
            </div>
            
            <div class="project-meta">
              <small>更新于 ${new Date(project.updatedAt).toLocaleDateString('zh-CN')}</small>
            </div>
          </div>
        </div>
      `).join('');
    }

    updatePagination() {
      const totalPages = Math.ceil(this.totalProjects / this.pageSize);
      const pagination = document.getElementById('pagination');
      const prevBtn = document.getElementById('prev-page') as HTMLButtonElement;
      const nextBtn = document.getElementById('next-page') as HTMLButtonElement;
      const pageInfo = document.getElementById('page-info');

      if (totalPages <= 1) {
        if (pagination) pagination.style.display = 'none';
        return;
      }

      if (pagination) pagination.style.display = 'flex';
      if (prevBtn) prevBtn.disabled = this.currentPage <= 1;
      if (nextBtn) nextBtn.disabled = this.currentPage >= totalPages;
      if (pageInfo) pageInfo.textContent = `第 ${this.currentPage} 页，共 ${totalPages} 页`;
    }

    showLoading() {
      const loading = document.getElementById('loading');
      const container = document.getElementById('projects-container');
      const error = document.getElementById('error-state');
      const empty = document.getElementById('empty-state');
      
      if (loading) loading.style.display = 'block';
      if (container) container.style.display = 'none';
      if (error) error.style.display = 'none';
      if (empty) empty.style.display = 'none';
    }

    showProjects() {
      const loading = document.getElementById('loading');
      const container = document.getElementById('projects-container');
      const error = document.getElementById('error-state');
      const empty = document.getElementById('empty-state');
      
      if (loading) loading.style.display = 'none';
      if (container) container.style.display = 'block';
      if (error) error.style.display = 'none';
      if (empty) empty.style.display = 'none';
    }

    showError(message: string) {
      const loading = document.getElementById('loading');
      const container = document.getElementById('projects-container');
      const error = document.getElementById('error-state');
      const empty = document.getElementById('empty-state');
      const errorMessage = document.getElementById('error-message');
      
      if (loading) loading.style.display = 'none';
      if (container) container.style.display = 'none';
      if (error) error.style.display = 'block';
      if (empty) empty.style.display = 'none';
      if (errorMessage) errorMessage.textContent = message;
    }

    showEmpty() {
      const loading = document.getElementById('loading');
      const container = document.getElementById('projects-container');
      const error = document.getElementById('error-state');
      const empty = document.getElementById('empty-state');
      
      if (loading) loading.style.display = 'none';
      if (container) container.style.display = 'none';
      if (error) error.style.display = 'none';
      if (empty) empty.style.display = 'block';
    }
  }

  // 初始化项目管理器
  document.addEventListener('DOMContentLoaded', () => {
    new ProjectManager();
  });
</script>

<style>
  .filters-section {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin: 2rem 0;
    padding: 1.5rem;
    background: var(--theme-bg-secondary);
    border-radius: 12px;
    align-items: center;
  }

  .filter-group {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .filter-group label {
    font-weight: 600;
    color: var(--theme-text);
  }

  .filter-select {
    padding: 0.5rem;
    border: 1px solid var(--theme-border);
    border-radius: 6px;
    background: var(--theme-bg);
    color: var(--theme-text);
  }

  .refresh-btn {
    padding: 0.5rem 1rem;
    background: var(--theme-accent);
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .refresh-btn:hover {
    background: var(--theme-accent-hover);
  }

  .loading-state {
    text-align: center;
    padding: 3rem;
  }

  .spinner {
    width: 40px;
    height: 40px;
    border: 4px solid var(--theme-border);
    border-top: 4px solid var(--theme-accent);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 1rem;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
    margin: 2rem 0;
  }

  .project-card {
    background: var(--theme-bg-secondary);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s, box-shadow 0.2s;
  }

  .project-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .project-card.featured {
    border: 2px solid var(--theme-accent);
  }

  .project-image {
    position: relative;
    height: 200px;
    overflow: hidden;
  }

  .project-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .featured-badge {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: var(--theme-accent);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.8rem;
    font-weight: 600;
  }

  .project-content {
    padding: 1.5rem;
  }

  .project-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1rem;
  }

  .project-title {
    margin: 0;
    font-size: 1.25rem;
    color: var(--theme-text);
  }

  .project-category {
    background: var(--theme-accent);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.8rem;
    font-weight: 600;
  }

  .project-description {
    color: var(--theme-text-secondary);
    line-height: 1.6;
    margin-bottom: 1rem;
  }

  .project-technologies {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .tech-tag {
    background: var(--theme-bg-code);
    color: var(--theme-text-code);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.8rem;
    font-family: "Fira Code", "Monaco", "Consolas", monospace;
  }

  .project-links {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .project-link {
    padding: 0.5rem 1rem;
    border-radius: 6px;
    text-decoration: none;
    font-weight: 600;
    transition: background-color 0.2s;
  }

  .project-link.github {
    background: #24292e;
    color: white;
  }

  .project-link.github:hover {
    background: #1a1e22;
  }

  .project-link.live {
    background: var(--theme-accent);
    color: white;
  }

  .project-link.live:hover {
    background: var(--theme-accent-hover);
  }

  .project-meta {
    color: var(--theme-text-secondary);
    font-size: 0.9rem;
  }

  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    margin: 2rem 0;
  }

  .page-btn {
    padding: 0.5rem 1rem;
    background: var(--theme-accent);
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .page-btn:hover:not(:disabled) {
    background: var(--theme-accent-hover);
  }

  .page-btn:disabled {
    background: var(--theme-border);
    cursor: not-allowed;
  }

  .page-info {
    color: var(--theme-text-secondary);
    font-weight: 600;
  }

  .error-state,
  .empty-state {
    text-align: center;
    padding: 3rem;
    color: var(--theme-text-secondary);
  }

  .retry-btn {
    padding: 0.75rem 1.5rem;
    background: var(--theme-accent);
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    margin-top: 1rem;
  }

  .retry-btn:hover {
    background: var(--theme-accent-hover);
  }

  @media (max-width: 768px) {
    .filters-section {
      flex-direction: column;
      align-items: stretch;
    }

    .filter-group {
      justify-content: space-between;
    }

    .projects-grid {
      grid-template-columns: 1fr;
    }

    .project-header {
      flex-direction: column;
      gap: 0.5rem;
    }

    .project-links {
      flex-direction: column;
    }
  }
</style>
