---
// actions.astro - Astro Actions 接口注册示例页面
import Layout from "../layouts/BlogPost.astro";
---

<Layout
  title="Astro Actions 接口注册示例"
  description="展示如何在 Astro EdgeOne 适配器中使用 Actions 接口注册功能"
  pubDate={new Date()}
>
  <div class="wrapper">
    <h1>Astro Actions 接口注册示例</h1>

    <p class="text-lg">
      这个页面展示了如何在 Astro EdgeOne 适配器中使用 Actions 接口注册功能。
    </p>

    <div class="actions-demo">
      <h2>📋 Actions 接口示例</h2>

      <div class="action-item">
        <h3>1. 用户注册接口</h3>
        <div class="code-block">
          <pre><code>{`POST /api/register
Content-Type: application/json

{
  "username": "user123",
  "email": "user@example.com",
  "password": "securepassword"
}`}</code></pre>
        </div>
        <p class="description">
          用户注册接口，接收用户名、邮箱和密码，返回注册结果。
        </p>
      </div>

      <div class="action-item">
        <h3>2. 用户登录接口</h3>
        <div class="code-block">
          <pre><code>{`POST /api/login
Content-Type: application/json

{
  "email": "user@example.com",
  "password": "securepassword"
}`}</code></pre>
        </div>
        <p class="description">
          用户登录接口，验证邮箱和密码，返回 JWT token。
        </p>
      </div>

      <div class="action-item">
        <h3>3. 获取用户信息接口</h3>
        <div class="code-block">
          <pre><code>{`GET /api/user/profile
Authorization: Bearer <JWT_TOKEN>`}</code></pre>
        </div>
        <p class="description">获取当前登录用户的详细信息。</p>
      </div>

      <div class="action-item">
        <h3>4. 更新用户信息接口</h3>
        <div class="code-block">
          <pre><code>{`PUT /api/user/profile
Authorization: Bearer <JWT_TOKEN>
Content-Type: application/json

{
  "username": "newusername",
  "bio": "Updated bio"
}`}</code></pre>
        </div>
        <p class="description">更新用户的基本信息。</p>
      </div>

      <div class="action-item">
        <h3>5. 文件上传接口</h3>
        <div class="code-block">
          <pre><code>{`POST /api/upload
Authorization: Bearer <JWT_TOKEN>
Content-Type: multipart/form-data

file: [binary data]`}</code></pre>
        </div>
        <p class="description">文件上传接口，支持图片、文档等文件类型。</p>
      </div>
    </div>

    <div class="implementation-guide">
      <h2>🛠️ 实现指南</h2>

      <h3>1. 创建 Actions 文件</h3>
      <p>在 <code>src/actions/</code> 目录下创建对应的 action 文件：</p>
      <div class="code-block">
        <pre><code>{`// src/actions/user.ts
export async function registerUser(formData: FormData) {
  const username = formData.get('username') as string;
  const email = formData.get('email') as string;
  const password = formData.get('password') as string;
  
  // 验证输入
  if (!username || !email || !password) {
    return { success: false, error: 'Missing required fields' };
  }
  
  // 处理注册逻辑
  try {
    // 这里添加你的注册逻辑
    return { success: true, message: 'User registered successfully' };
  } catch (error) {
    return { success: false, error: 'Registration failed' };
  }
}`}</code></pre>
      </div>

      <h3>2. 在页面中使用 Actions</h3>
      <div class="code-block">
        <pre><code>{`<!-- src/pages/register.astro -->
---
import { registerUser } from '../actions/user.ts';
---

<form method="POST" action={registerUser}>
  <input name="username" placeholder="Username" required />
  <input name="email" type="email" placeholder="Email" required />
  <input name="password" type="password" placeholder="Password" required />
  <button type="submit">Register</button>
</form>`}</code></pre>
      </div>

      <h3>3. EdgeOne 适配器配置</h3>
      <p>确保在 <code>meta.json</code> 中正确配置路由：</p>
      <div class="code-block">
        <pre><code>{`{
  "nextRoutes": [
    {
      "path": "^/api/.*$",
      "srcRoute": "/api/[...slug]"
    }
  ]
}`}</code></pre>
      </div>
    </div>

    <div class="testing-section">
      <h2>🧪 测试示例</h2>

      <h3>使用 curl 测试</h3>
      <div class="code-block">
        <pre><code>{`# 测试用户注册
curl -X POST https://your-domain.edgeone.run/api/register \
  -H "Content-Type: application/json" \
  -d '{"username":"testuser","email":"test@example.com","password":"testpass"}'

# 测试用户登录
curl -X POST https://your-domain.edgeone.run/api/login \
  -H "Content-Type: application/json" \
  -d '{"email":"test@example.com","password":"testpass"}'`}</code></pre>
      </div>

      <h3>使用 JavaScript fetch</h3>
      <div class="code-block">
        <pre><code>{`// 注册用户
const registerResponse = await fetch('/api/register', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    username: 'testuser',
    email: 'test@example.com',
    password: 'testpass'
  })
});

const registerResult = await registerResponse.json();
console.log(registerResult);`}</code></pre>
      </div>
    </div>

    <div class="best-practices">
      <h2>✨ 最佳实践</h2>

      <ul>
        <li><strong>输入验证</strong>：始终验证用户输入，防止恶意数据</li>
        <li><strong>错误处理</strong>：提供清晰的错误信息和状态码</li>
        <li>
          <strong>安全性</strong>：使用 HTTPS，验证 JWT token，防止 CSRF 攻击
        </li>
        <li><strong>性能优化</strong>：使用缓存，优化数据库查询</li>
        <li><strong>日志记录</strong>：记录重要的操作和错误</li>
        <li><strong>API 文档</strong>：提供完整的 API 文档和示例</li>
      </ul>
    </div>

    <div class="navigation">
      <a href="/" class="back-link">← 返回首页</a>
      <a href="/blog" class="next-link">查看博客 →</a>
    </div>
  </div>
</Layout>

<style>
  .actions-demo {
    margin: 2rem 0;
  }

  .action-item {
    margin: 2rem 0;
    padding: 1.5rem;
    border: 1px solid var(--theme-border);
    border-radius: 8px;
    background: var(--theme-bg-secondary);
  }

  .action-item h3 {
    margin-top: 0;
    color: var(--theme-accent);
  }

  .code-block {
    background: var(--theme-bg-code);
    border: 1px solid var(--theme-border);
    border-radius: 6px;
    padding: 1rem;
    margin: 1rem 0;
    overflow-x: auto;
  }

  .code-block pre {
    margin: 0;
    font-family: "Fira Code", "Monaco", "Consolas", monospace;
    font-size: 0.9rem;
    line-height: 1.5;
  }

  .code-block code {
    color: var(--theme-text-code);
  }

  .description {
    margin-top: 1rem;
    color: var(--theme-text-secondary);
    font-style: italic;
  }

  .implementation-guide,
  .testing-section,
  .best-practices {
    margin: 3rem 0;
    padding: 2rem;
    background: var(--theme-bg-secondary);
    border-radius: 12px;
  }

  .implementation-guide h3,
  .testing-section h3 {
    color: var(--theme-accent);
    margin-top: 2rem;
  }

  .implementation-guide h3:first-child,
  .testing-section h3:first-child {
    margin-top: 0;
  }

  .best-practices ul {
    list-style: none;
    padding: 0;
  }

  .best-practices li {
    margin: 1rem 0;
    padding-left: 1.5rem;
    position: relative;
  }

  .best-practices li::before {
    content: "✓";
    position: absolute;
    left: 0;
    color: var(--theme-accent);
    font-weight: bold;
  }

  .navigation {
    margin: 3rem 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .back-link,
  .next-link {
    padding: 0.75rem 1.5rem;
    background: var(--theme-accent);
    color: white;
    text-decoration: none;
    border-radius: 6px;
    transition: background-color 0.2s;
  }

  .back-link:hover,
  .next-link:hover {
    background: var(--theme-accent-hover);
  }

  @media (max-width: 768px) {
    .navigation {
      flex-direction: column;
      gap: 1rem;
    }

    .code-block {
      font-size: 0.8rem;
    }
  }
</style>
